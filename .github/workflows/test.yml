#name: Tests_CICD
#
#on:
#  push:
#    branches:
#      - feature/jenkins  # Trigger this action on the 'feature/jenkins' branch
#
#jobs:
#  build:
#    runs-on: windows-latest
#
#    steps:
#      # Checkout the code from GitHub repository
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      # Set up Python 3.12.5
#      - name: Set up Python 3.12.5
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.12.5'
#
#      # Install dependencies from requirements.txt
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt
#
#      # Install Playwright Browsers (optional if needed for testing)
#      - name: Install Playwright Browsers
#        run: |
#          python -m playwright install
#
#      # Install Allure Commandline on Windows
#      - name: Install Allure Commandline
#        run: |
#            # Download Allure command-line tool for version 2.32.2
#            Invoke-WebRequest -Uri "https://github.com/allure-framework/allure2/releases/download/2.32.2/allure-2.32.2.zip" -OutFile "allure.zip"
#
#            # Extract the zip file to the current directory
#            Expand-Archive -Path "allure.zip" -DestinationPath "allure"
#
#            # Verify the extraction, ensure allure.bat exists
#            if (Test-Path "allure\allure-2.32.2\bin\allure.bat") {
#            Write-Host "allure.bat found"
#            } else {
#            Write-Host "allure.bat not found"
#            exit 1
#            }
#
#            # Move the Allure directory to a common location
#            $allurePath = "C:\allure"
#            if (-not (Test-Path $allurePath)) {
#            New-Item -Path $allurePath -ItemType Directory
#            }
#            move-item -Path "allure\allure-2.32.2" -Destination $allurePath -Force
#
#            # Persist Allure to PATH
#            [System.Environment]::SetEnvironmentVariable("PATH", "$env:PATH;$allurePath\allure-2.32.2\bin", [System.EnvironmentVariableTarget]::Machine)
#
#      # Verify Allure installation
#      - name: Verify Allure installation
#        run: |
#                # Verify Allure is installed correctly
#                & "C:\allure\allure-2.32.2\bin\allure.bat" --version
#
#      # Run Tests with Allure results
#      - name: Run Tests with Allure results
#        continue-on-error: true
#        run: |
#                pytest --alluredir=allure-results --maxfail=1 --disable-warnings
#
#      # Generate Allure Report
#      - name: Generate Allure Report
#        run: |
#                & "C:\allure\allure-2.32.2\bin\allure.bat" generate allure-results --clean -o allure-report
#
#      # Upload Allure report as artifact
#      - name: Upload Allure report as artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: allure-report
#          path: allure-report


# using gh-pages
name: Tests_CICD

on:
  push:
    branches:
      - feature/jenkins  # Trigger the action on 'feature/jenkins' branch

jobs:
  build:
    runs-on: windows-latest  # Use the latest Windows runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-cache-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
              ${{ runner.os }}-pip-cache-

      - name: Set up Python 3.12.5
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.5'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright Browsers
        run: |
          python -m playwright install chromium

      - name: Install Allure Commandline on Windows
        run: |
            # Download the Allure command-line tool zip file (version 2.32.2)
            Invoke-WebRequest -Uri "https://github.com/allure-framework/allure2/releases/download/2.32.2/allure-2.32.2.zip" -OutFile "allure.zip"
            
            # Extract the zip file to the current directory
            Expand-Archive -Path "allure.zip" -DestinationPath "allure"
            
            # Verify the extraction, ensure allure.bat exists
            if (Test-Path "allure\allure-2.32.2\bin\allure.bat") {
              Write-Host "allure.bat found"
            } else {
              Write-Host "allure.bat not found"
              exit 1
            }
            
            # Move the Allure directory to a common location
            $allurePath = "C:\allure"
            if (-not (Test-Path $allurePath)) {
              New-Item -Path $allurePath -ItemType Directory
            }
            move-item -Path "allure\allure-2.32.2" -Destination $allurePath -Force
            
            # Persist Allure to PATH
            [System.Environment]::SetEnvironmentVariable("PATH", "$env:PATH;$allurePath\allure-2.32.2\bin", [System.EnvironmentVariableTarget]::Machine)

      - name: Verify Allure installation
        run: |
          # Verify Allure is installed correctly
          & "C:\allure\allure-2.32.2\bin\allure.bat" --version

      - name: Run Tests with Allure results and Test coverage
        continue-on-error: true
        run: |
          pytest --alluredir=allure_report --maxfail=1 --disable-warnings --browser=chromium --cov=Flipkart_testnew --cov-report=xml --cov-report=term

      - name: Generate Allure Report for Chromium
        run: |
          & "C:\allure\allure-2.32.2\bin\allure.bat" generate allure-results --clean -o allure_report-chromium

      - name: Merge Allure Reports into One
        run: |
          mkdir allure_report
          xcopy /e /i /Y allure_report-chromium\* allure_report\

      - name: Deploy Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
           publish_dir: allure_report  # Make sure this matches your folder name
           github_token: ${{ secrets.GH_TOKEN }}  # Uses GitHub token for authentication
           publish_branch: gh-pages  # Pushes to the 'gh-pages' branch
           allow_empty_commit: true  # Allows empty commits, useful for initial deployments
           keep_files: false  # Removes all files in the gh-pages branch before pushing new content
